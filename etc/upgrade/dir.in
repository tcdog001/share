#!/bin/bash

if [ -n "${__UPGRADE_DIR_IN__}" ]; then
	return
else
	__UPGRADE_DIR_IN__="$0"
fi

. ${__ROOTFS__}/etc/utils/utils.in

readonly file_ap=sysupgrade.bin
readonly file_ap_long=openwrt-ar71xx-generic-db120-squashfs-sysupgrade.bin
readonly file_ap_boot=u-boot.bin
readonly file_boot=fastboot-burn.bin
readonly file_kernel=hi_kernel.bin
readonly file_pqparam=pq_param_hi3718cv100.bin

#
# base dir
#
readonly dir_flash=/mnt/flash
readonly dir_sd=/mnt/sd
readonly dir_hd=/mnt/hd
readonly dir_usb=/mnt/usb
readonly dir_tftp=/tmp/tftp
readonly dir_status=/tmp/status
readonly dir_websit=${dir_hd}/website

#
# usb dir
#
readonly dir_usb_upgrade=${dir_usb}/upgrade
readonly dir_usb_upgrade_rootfs=${dir_usb_upgrade}/rootfs
readonly dir_usb_upgrade_rootfs_data=${dir_usb_upgrade}/rootfs_data


#
# partition dir
#
readonly dir_rootfs=${dir_flash}/rootfs
readonly dir_rootfs0=${dir_flash}/rootfs0
readonly dir_rootfs1=${dir_flash}/rootfs1
readonly dir_rootfs2=${dir_flash}/rootfs2
readonly dir_rootfs_data=${dir_flash}/rootfs_data

#
# get current rootfs's idx
#
rootfs_current() {
	local self=$(cat /proc/cmdline | sed 's# #\n#g' | grep root= | awk -F '=' '{print $2}')
	local i

	for ((i=0; i<=2; i++)); do
		local dev=dev_rootfs${i}

		if [ "${!dev}" == "${self}" ]; then
			echo "${i}"

			return
		fi
	done

	echo "0"
	return ${e_noexist}
}

#
# get buddy rootfs's idx
#[$1:idx]
#
# rootfs_buddy ==> rootfs_current's buddy
# rootfs_buddy 1 ==> rootfs1's buddy ==>2
# rootfs_buddy 2 ==> rootfs2's buddy ==>1
#
rootfs_buddy() {
	local idx=$1

	if [ -z "${idx}" ]; then
		idx="$(rootfs_current)"
	fi

	case "${idx}" in
	"0")
		echo "1"
		return ${e_inval}
		;;
	"1")
		echo "2"
		;;
	"2")
		echo "1"
		;;
	*)
		echo "1"
		return ${e_inval}
		;;
	esac
}

#
#$1:idx
#
rootfs_dir() {
	local idx="$1"

	echo "${dir_rootfs}${idx}"
}

rootfs_buddy_dir() {
	echo "$(rootfs_dir $(rootfs_buddy))"
}

#
#$1:min_size
#$2:max_size
#
get_dev_bysize() {
	local min_size=$1
	local max_size=$2

	local a
	local b
	local size
	local name
	cat /proc/partitions | grep sd[a-z]1 | while read a b size name; do
		if ((size>=min_size && size<=max_size)); then
			echo "/dev/${name}"

			return
		fi
	done
}

#
#$1:dev_deft
#$2:min_size
#$3:max_size
#
get_dev_bydeft() {
	local dev_deft=$1
	local min_size=$2
	local max_size=$3

	local dev=$(get_dev_bysize ${min_size} ${max_size})
	if [ -n "${dev}" ]; then
		echo ${dev}
	else
		echo ${dev_deft}
	fi
}

get_dev_hd() {
	#
	# 100G to 1T
	#	100G: 100*1024*1024=104857600 (K)
	# 	1T:   1024*1024*1024=1073741824 (K)
	#
	dev_hd=$(get_dev_bydeft /dev/sda1 104857600 1073741824)

	echo ${dev_hd}
}
dev_hd=$(get_dev_hd)

get_dev_usb() {
	#
	# 100G to 1T
	#	1G: 	1024*1024=1048576 (K)
	# 	32G: 	32*1024*1024=33554432 (K)
	#
	dev_usb=$(get_dev_bydeft /dev/sdb1 1048576 33554432)

	echo ${dev_usb}
}
dev_usb=$(get_dev_usb)


readonly dev_sd=/dev/mmcblk1p1

#
# /dev/mmcblk0pXXX
#
readonly dev_rootfs0=/dev/mmcblk0p7
readonly dev_rootfs1=/dev/mmcblk0p8
readonly dev_rootfs2=/dev/mmcblk0p9
readonly dev_rootfs_data=/dev/mmcblk0p10

declare -A dev_emmc_bin=( \
	[fastboot-burn.bin]=/dev/mmcblk0p1 \
	[pq_param_hi3718cv100.bin]=/dev/mmcblk0p4 \
	[hi_kernel.bin]=/dev/mmcblk0p6 \
)

readonly link_hd=/hd
readonly link_sd=/sd
readonly link_usb=/usb
readonly link_rootfs0=/rootfs0
readonly link_rootfs1=/rootfs1
readonly link_rootfs2=/rootfs2
readonly link_buddy=/buddy
readonly link_rootfs_data=/data
readonly link_opt=/opt

readonly mount_retry_delay=1

#
#$1:dev
#
mount_check() {
	local dev=$1

	if [ -z "$(cat /proc/partitions | grep $(basename ${dev}))" ]; then
		#
		# if dev no exist, exit
		#
		echo "${dev} not exist"

		return ${e_noexist}
	elif [ -n "$(mount | grep ${dev})" ]; then
		#
		# if have mounted, do nothing
		#
		echo "${dev} have mounted"
	fi
}

#
#$1:dev name
#$2:dir name
#$3:retry times
#$4:auto mkfs
#[$5:option]
#
do_mount() {
	local dev="$1"
	local dir="$2"
	local retry="$3"
	local mkfs="$4"
	local option="$5"
	local opt="-t ext4 -o noatime -o nodiratime"
	mkdir -p ${dir}

	mount_check ${dev} || {
		return ${e_noexist}
	}

	local err=0
	local times=0
	local action="mount ${opt} ${option} ${dev} ${dir}"
	while ((times < retry)); do
		((times++))
		mount ${opt} ${option} ${dev} ${dir}; err=$?
		if [ "0" == "${err}" ]; then
			echo_logger "mount" "OK: ${action}"

			return
		else
			echo_logger "mount times:${times}" "ERR[${err}]: ${action}"
		fi

		sleep ${mount_retry_delay}
	done

	if [[ "0" != "${err}" && "yes" == "${mkfs}" ]]; then
		mkfs.ext4 ${dev}; err=$?
		if [ "0" != "${err}" ]; then
			echo_logger "mkfs" "ERR[${err}]: mkfs.ext4 ${dev}"

			return ${e_mkfs_failed}
		else
			echo_logger "mkfs" "OK: mkfs.ext4 ${dev}"
		fi

		mount ${opt} ${option} ${dev} ${dir}; err=$?
		if [ "0" != "${err}" ]; then
			echo_logger "mount" "ERR[${err}]: ${action}"

			return ${e_mount_failed}
		else
			echo_logger "mount" "OK: ${action}"
		fi
	fi

	return ${err}
}

#
#$1:dev name
#
do_umount() {
	local dev="$1"
	local err=0;

	if [ -z "$(cat /proc/partitions | grep $(basename ${dev}))" ]; then
		return
	elif [ -z "$(mount | grep ${dev})" ]; then
		return
	fi

	umount -r ${dev}; err=$?
	if [ "0" == "${err}" ]; then
		echo_logger "umount" \
			"OK: umount ${dev}"
	else
		echo_logger "umount" \
			"ERR[${err}]: umount ${dev}"

		return ${err}
	fi
}

readonly file_product_test=product_test.sh

mount_sd() {
	do_mount ${dev_sd} ${dir_sd} 5 "no"

	#
	# for app use /sd/xxx
	#
	LN_DIR ${dir_sd} ${link_sd}

	if [ -x "${dir_sd}/${file_product_test}" ]; then
		echo_logger "mount" \
			"found and exec ${file_product_test}"

		${dir_sd}/${file_product_test}
	fi
}

umount_sd() {
	rm -f ${link_sd}

	sync

	do_umount ${dev_sd}
}

mount_hd() {
	do_mount ${dev_hd} ${dir_hd} 5 "no" && {
		usr/sbin/sysled sata on
	}

	if [ -d "${dir_websit}" ]; then
		chmod -R 777 ${dir_websit}
	fi

	LN_DIR ${dir_hd} ${link_hd}
}

umount_hd() {
	rm -f ${link_hd}

	sync

	do_umount ${dev_hd}
}

mount_usb() {
	do_mount ${dev_usb} ${dir_usb} 5 "no"

	LN_DIR ${dir_usb} ${link_usb}
}

umount_usb() {
	rm -f ${link_usb}

	sync

	do_umount ${dev_usb}
}

#
#$1:idx
#$2:option
#
remount_rootfs() {
	local idx=$1
	local option=$2
	local opt="-t ext4 -o noatime -o nodiratime"

	local dev=dev_rootfs${idx}
	local dir=dir_rootfs${idx}
	local link=link_rootfs${idx}

	umount ${!dev} > /dev/null 2>&1
	rm -f ${!link} > /dev/null 2>&1

	mount ${opt} ${option} ${!dev} ${!dir} > /dev/null 2>&1
	LN_DIR ${!dir} ${!link}
}

mount_rootfs() {
	#
	# readonly
	#
	do_mount ${dev_rootfs0} ${dir_rootfs0} 3 "no" "-r"
	case "$(rootfs_current)" in
	"0")
		do_mount ${dev_rootfs1} ${dir_rootfs1} 3 "yes"
		do_mount ${dev_rootfs2} ${dir_rootfs2} 3 "yes"
		;;
	"1")
		do_mount ${dev_rootfs1} ${dir_rootfs1} 3 "no"
		do_mount ${dev_rootfs2} ${dir_rootfs2} 3 "yes"
		;;
	"2")
		do_mount ${dev_rootfs1} ${dir_rootfs1} 3 "yes"
		do_mount ${dev_rootfs2} ${dir_rootfs2} 3 "no"
		;;
	esac

	LN_DIR ${dir_rootfs0} ${link_rootfs0}
	LN_DIR ${dir_rootfs1} ${link_rootfs1}
	LN_DIR ${dir_rootfs2} ${link_rootfs2}
	LN_DIR ${dir_rootfs}$(rootfs_buddy) ${link_buddy}
}

umount_rootfs() {
	rm -f ${link_buddy}
	rm -f ${link_rootfs2}
	rm -f ${link_rootfs1}
	rm -f ${link_rootfs0}

	sync

	do_umount ${dev_rootfs2}
	do_umount ${dev_rootfs1}
	do_umount ${dev_rootfs0}
}

#
# version(whole/patch) dir
#
readonly dir_version=${dir_rootfs_data}/version
readonly dir_ap_version=${dir_version}/ap
readonly dir_md_version=${dir_version}/md

#
# rsync dir
#
readonly dir_rsync=${dir_rootfs_data}/rsync
readonly dir_ap_rsync=${dir_rsync}/ap
readonly dir_md_rsync=${dir_rsync}/md

readonly dir_resource=${dir_rootfs_data}/resource

#
#$1:obj
#
rsync_basedir() {
	local obj="$1"

	echo "${dir_rsync}/${obj}"
}

#
#$1:obj
#
whole_basedir() {
	local obj="$1"

	echo "${dir_version}/${obj}"
}

#
#$1:obj
#
patch_basedir() {
	local obj="$1"

	echo "${dir_version}/${obj}"
}


#
#$1:obj
#$2:version
#
rsync_version_dir() {
	local obj="$1"
	local version="$2"

	echo "$(rsync_basedir ${obj})/${version}"
}

#
#$1:obj
#$2:version
#
rsync_rootfs_dir() {
	local obj="$1"
	local version="$2"

	echo "$(rsync_version_dir ${obj} ${version})/rootfs"
}

#
#$1:obj
#$2:type
#
get_version_basedir() {
	local obj="$1"
	local type="$2"

	case "${type}" in
	"rsync")
		echo "$(rsync_basedir ${obj})"
		;;
	"whole")
		echo "$(whole_basedir ${obj})"
		;;
	"patch")
		echo "$(patch_basedir ${obj})"
		;;
	*)
		return ${e_bad_board}
		;;
	esac
}

#
#$1:obj
#$2:type
#
get_version_list() {
	local obj="$1"
	local type="$2"
	local dir="$(get_version_basedir ${obj} ${type})"

	echo "$(ls ${dir})"
}


#
# opt dir, must link to /opt
#
readonly dir_opt=${dir_rootfs_data}/opt

readonly dir_opt_log=${dir_opt}/log
readonly dir_opt_log_gps=${dir_opt_log}/gps
readonly dir_opt_log_usr=${dir_opt_log}/usr
readonly dir_opt_log_nginx=${dir_opt_log}/nginx
readonly dir_opt_log_nginx_error=${dir_opt_log_nginx}/error
readonly dir_opt_log_nginx_access=${dir_opt_log_nginx}/access
readonly dir_opt_log_php=${dir_opt_log}/php
readonly dir_opt_log_phpfpm_error=${dir_opt_log_php}/error
readonly dir_opt_log_auth=${dir_opt_log}/auth
readonly dir_opt_log_sys=${dir_opt_log}/sys
readonly dir_opt_log_sys_md=${dir_opt_log_sys}/md
readonly dir_opt_log_sys_md_init=${dir_opt_log_sys_md}/init
readonly dir_opt_log_sys_md_klog=${dir_opt_log_sys_md}/klog
readonly dir_opt_log_sys_md_ulog=${dir_opt_log_sys_md}/ulog
readonly dir_opt_log_sys_ap=${dir_opt_log_sys}/ap
readonly dir_opt_log_sys_ap_init=${dir_opt_log_sys_ap}/init
readonly dir_opt_log_sys_ap_klog=${dir_opt_log_sys_ap}/klog
readonly dir_opt_log_sys_ap_ulog=${dir_opt_log_sys_ap}/ulog

readonly dir_opt_data=${dir_opt}/data
readonly dir_opt_data_gps=${dir_opt_data}/gps
readonly dir_opt_data_3g=${dir_opt_data}/3g

#
#$1:idx
#
mount_rootfs_data() {
	local err=0

	do_mount ${dev_rootfs_data} ${dir_rootfs_data} 5 "no" || {
		return $?
	}

	#
	# link /mnt/flash/rootfs_data to /data
	#
	LN_DIR ${dir_rootfs_data} ${link_rootfs_data}

	#
	# link /mnt/flash/rootfs_data/opt to /opt
	#
	LN_DIR ${dir_opt} ${link_opt}

	mkdir -p \
		${dir_resource} \
		${dir_ap_version} \
		${dir_md_version} \
		${dir_ap_rsync} \
		${dir_md_rsync} \
		${dir_opt_data_gps} \
		${dir_opt_data_3g} \
		${dir_opt_log_gps} \
		${dir_opt_log_usr} \
		${dir_opt_log_nginx_error} \
		${dir_opt_log_nginx_access} \
		${dir_opt_log_phpfpm_error} \
		${dir_opt_log_auth} \
		${dir_opt_log_sys_md_init} \
		${dir_opt_log_sys_md_klog} \
		${dir_opt_log_sys_md_ulog} \
		${dir_opt_log_sys_ap_init} \
		${dir_opt_log_sys_ap_klog} \
		${dir_opt_log_sys_ap_ulog} \
		${dir_opt_conf}

	local now=$(getnow)
	#
	# save md init info
	#
	dmesg > ${dir_opt_log_sys_md_init}/${now}
	#
	# save last syslog
	#
	local ulog=${dir_opt_log_sys_md_ulog}/messages
	if [ -f "${ulog}" ]; then
		mv ${ulog} ${dir_opt_log_sys_md_ulog}/${now}
	fi
	#
	# start syslogd, log at rootfs_data
	#	Max size (1024KB) before rotate
	#
	syslogd -s 1024 -O ${dir_opt_log_sys_md_ulog}/messages
	#
	# todo: how to save /proc/kmsg
	#
}

umount_rootfs_data() {
	rm -f ${link_opt}
	rm -f ${link_rootfs_data}

	sync

	do_umount ${dev_rootfs_data}
}

mount_all() {
	mount_rootfs
	mount_rootfs_data

	echo "wait for sd ..."; sleep 1
	mount_sd

	echo "wait for hd ..."; sleep 1
	mount_hd

	echo "wait for usb ..."; sleep 1
	mount_usb
}

umount_self() {
	umount -a
}

umount_others() {
	umount_hd
	umount_sd
	umount_rootfs_data
	umount_rootfs
}

umount_all() {
	umount_usb
	umount_others

	umount_self
}

#
# tftp dir
#
readonly dir_tftp_log=${dir_tftp}/log
readonly dir_tftp_log_gps=${dir_tftp_log}/gps
readonly dir_tftp_log_usr=${dir_tftp_log}/usr
readonly dir_tftp_log_auth=${dir_tftp_log}/auth
readonly dir_tftp_log_sys=${dir_tftp_log}/sys
readonly dir_tftp_log_sys_md=${dir_tftp_log_sys}/md
readonly dir_tftp_log_sys_md_init=${dir_tftp_log_sys_md}/init
readonly dir_tftp_log_sys_md_klog=${dir_tftp_log_sys_md}/klog
readonly dir_tftp_log_sys_md_ulog=${dir_tftp_log_sys_md}/ulog
readonly dir_tftp_log_sys_ap=${dir_tftp_log_sys}/ap
readonly dir_tftp_log_sys_ap_init=${dir_tftp_log_sys_ap}/init
readonly dir_tftp_log_sys_ap_klog=${dir_tftp_log_sys_ap}/klog
readonly dir_tftp_log_sys_ap_ulog=${dir_tftp_log_sys_ap}/ulog

readonly dir_tftp_data=${dir_tftp}/data
readonly dir_tftp_data_gps=${dir_tftp_data}/gps
readonly dir_tftp_data_3g=${dir_tftp_data}/3g

readonly dir_tftp_version=${dir_tftp}/version

#
# tftp dir/file ==> opt dir/file
#
#$1:tftp dir/file
#
tftp2opt() {
	local file="$1"

	echo ${file} | sed 's#/tmp/tftp/#/opt/#'
}

#
# opt dir/file ==> tftp dir/file
#
#$1:opt dir/file
#
opt2tftp() {
	local file="$1"

	echo ${file} | sed 's#/opt/#/tmp/tftp/#'
}

setup_dir_tftp() {
	local i
	local opt
	local tmp

	mkdir -p ${dir_tftp_version}

	#
	# /tmp/tftp and /opt have same sub dir
	#
	#	/opt is softlink, so must end with /
	#
	for opt in $(find /opt/ -type d); do
		tmp=$(opt2tftp ${opt})

		mkdir -p ${tmp}
	done

	#
	# link ap boot
	#
	LN_FILE ${dir_rootfs0}/image/${file_ap_boot} ${dir_tftp}/${file_ap_boot}
	#
	# link ap file(for ap super recover)
	#
	LN_FILE ${dir_rootfs0}/image/${file_ap} ${dir_tftp}/${file_ap_long}
	#
	# link ap file(for ap upgrade)
	#
	LN_FILE ${__ROOTFS__}/image/${file_ap} ${dir_tftp_version}/${file_ap}
}

readonly file_status_3g=${dir_status}/3g
readonly file_status_5g=${dir_status}/5g

readonly LINK_UP=up
readonly LINK_DOWN=down

setup_dir_status() {
	mkdir -p ${dir_status}

	echo ${LINK_DOWN} > ${file_status_3g}
	echo ${LINK_DOWN} > ${file_status_5g}
}

setup_dir() {
	setup_dir_tftp
	setup_dir_status
}
