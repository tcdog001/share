#!/bin/bash

if [ -n "${__JSOCK_JSOCK_IN__}" ]; then
	return
else
	__JSOCK_JSOCK_IN__="$0"
fi

. ${__ROOTFS__}/etc/utils/utils.in

if [ -z "${JSOCK_PORT}" ]; then
	JSOCK_PORT=9527
fi
if [ -z "${JSOCK_PROTOCOL}" ]; then
	JSOCK_PROTOCOL="tcp"
fi
if [ -z "${JSOCK_TIMEOUT}" ]; then
	JSOCK_TIMEOUT=3
fi
if [ -z "${JSOCK_FD}" ]; then
	JSOCK_FD=4
fi

JSOCK_PEER=$(get_file_value ${__ROOTFS__}/etc/peer ${PEER})
JSOCK_PEER_STATE_FILE=/tmp/.jsock_peer_state

readonly JSOCK_PEER_STATE_LIST="nok ok"
readonly JSOCK_MODE_LIST="asyn ack syn"
readonly JSOCK_TYPE_LIST="sig msg cmd"

#
# ${!VAR*}==>VARxxx VARyyy VARzzz ...
#
VARLIST_JSOCK_PATH="${!JSOCK_*} ${!DEBUG*}"

jsock_debug_ok() {
	debug_echo "__jsock__" "__all__" "__ok__" $@
}

jsock_debug_error() {
	debug_echo "__jsock__" "__all__" "__error__" $@
}

jsock_debug_trace() {
	debug_echo "__jsock__" "__all__" "__trace__" $@
}


jsig_debug_ok() {
	debug_echo "__jsig__" "__all__" "__ok__" $@
}

jsig_debug_error() {
	debug_echo "__jsig__" "__all__" "__error__" $@
}

jsig_debug_trace() {
	debug_echo "__jsig__" "__all__" "__trace__" $@
}


jmsg_debug_ok() {
	debug_echo "__jmsg__" "__all__" "__ok__" $@
}

jmsg_debug_error() {
	debug_echo "__jmsg__" "__all__" "__error__" $@
}

jmsg_debug_trace() {
	debug_echo "__jmsg__" "__all__" "__trace__" $@
}


jcmd_debug_ok() {
	debug_echo "__jcmd__" "__all__" "__ok__" $@
}

jcmd_debug_error() {
	debug_echo "__jcmd__" "__all__" "__error__" $@
}

jcmd_debug_trace() {
	debug_echo "__jcmd__" "__all__" "__trace__" $@
}

#
#$1:action
#
jsock_do() {
	debug_do jsock "$*"
}

jsig_do() {
	debug_do jsig "$*"
}

jmsg_do() {
	debug_do jmsg "$*"
}

jcmd_do() {
	debug_do jcmd "$*"
}

jsock_logger() {
	do_logger "jsock" "$@"
}

jsig_logger() {
	do_logger "jsig" "$@"
}

jmsg_logger() {
	do_logger "jmsg" "$@"
}

jcmd_logger() {
	do_logger "jcmd" "$@"
}


#
#$1:mode
#$2:type
#$3:name
#$4:body...
#
__jsock_json() {
	local mode="$1"
	local type="$2"
	local name="$3"
	local body="$4"

	#
	# body must be object or array
	#
	printf '{"mode":"%s","type":"%s","name":"%s","body":%s}' \
		"${mode}" \
		"${type}" \
		"${name}" \
		"${body}"
}

#
#$1:mode
#
__jsock_check_mode() {
	local mode=$1

	in_list_check "${mode}" JSOCK_MODE_LIST || {
		return ${e_jsock_bad_mode}
	}
}

#
#$1:type
#
__jsock_check_type() {
	local type=$1

	in_list_check "${type}" JSOCK_TYPE_LIST || {
		return ${e_jsock_bad_type}
	}
}

#
#[$1:host]
#[$2:port]
#[$3:protocol]
#
jsock_open() {
	local host=$1
	local port=$2
	local protocol=$3

	if [ -z "${host}" ]; then
		host=${JSOCK_PEER}
	fi

	if [ -z "${port}" ]; then
		port=${JSOCK_PORT}
	fi

	if [ -z "${protocol}" ]; then
		protocol=${JSOCK_PROTOCOL}
	fi

	jsock_do "exec ${JSOCK_FD}<>/dev/${protocol}/${host}/${port}"
}

#
#no args
#
jsock_close() {
	jsock_do "exec ${JSOCK_FD}>&-"
}

#
#$1:json
#
jsock_send() {
	local json="$1"

	json_check "${json}" || {
		return ${e_bad_json}
	}

	jsock_do "echo '${json}' >&${JSOCK_FD}"
}

#
#NO used ......
#
jsock_recv() {
	jsock_do "cat <&${JSOCK_FD}"
}

#
#$1:mode
#$2:type
#$3:name
#$4:json
# {
#	"mode":"MODE",
#	"type":"TYPE",
#	"name":"NAME",
#	"body":{
#		"errno":"ERRNO",
#		"errinfo":"ERRINFO",
#		"result":"RESULT"
#	}
# }
#
jsock_handle() {
	local mode="$1"
	local type="$2"
	local name="$3"
	local json="$4"

	local stdout
	local stderr
	local errno
	local err=0

	if [ "${mode}" != "$(echo ${json} | jq -j '.mode|strings')" ]; then
		err=${e_jsock_bad_mode}
	elif [ "${type}" != "$(echo ${json} | jq -j '.type|strings')" ]; then
		err=${e_jsock_bad_type}
	elif [ "${name}" != "$(echo ${json} | jq -j '.name|strings')" ]; then
		err=${e_jsock_bad_name}
	fi

	errno="$(echo ${json} | jq -j '.body.errno|strings')"
	if [ -z "${errno}" ]; then
		err=${e_jsock_bad_errno}
	elif [ "0" != "${errno}" ]; then
		err=${errno}
	fi

	stdout="$(echo ${json} | jq -j '.body.stdout|strings')"
	if [ -z "${stdout}" ]; then
		err=${e_jsock_bad_stdout}
	else
		echo "${stdout}"
	fi

	stderr="$(echo ${json} | jq -j '.body.stderr|strings')"
	if [ -z "${stderr}" ]; then
		err=${e_jsock_bad_stderr}
	else
		echo "${stderr}" >&2
	fi

	return ${err}
}

#
#$1:host
#$2:mode
#$3:type
#$4:name
#$5:input body(json}...
#
jsock() {
	local host="$1"
	local mode="$2"
	local type="$3"
	local name="$4"; shift 4
	local body="$*"
	local err=0

	__jsock_check_mode "${mode}" || {
		return $? 
	}
	__jsock_check_type "${type}" || {
		return $?
	}

	if [ -z "${name}" ]; then
		return ${e_jsock_bad_name}
	fi

	json_check "${body}" || {
		return $?
	}

	local json=$(__jsock_json "${mode}" "${type}" "${name}" "${body}")

	jsock_open "${host}"
	jsock_send "${json}"
	#
	# recv when ack/syn
	#
	if [[ "ack" == "${mode}" || "syn" == "${mode}" ]]; then
		json=$(jsock_recv)

		j${type}_logger "jsock recv reply json:${json}"
		json_check "${json}" || {
			return ${e_bad_json}
		}

		local info=$(jsock_handle "${mode}" "${type}" "${name}" "${json}"); err=$?
		if [ -n "${info}" ]; then
			echo "${info}"
		fi
	fi
	jsock_close

	return ${err}
}


#
#$1:host
#$2:mode
#$3:name
#
jsig() {
	local host="$1"
	local mode="$2"
	local name="$3"

	jsock "${host}" "${mode}" "sig" "${name}" "${JSON_NULL_OBJECT}"
}

#
#$1:host
#$2:mode
#$3:name
#$4:body
#
jmsg() {
	local host="$1"
	local mode="$2"
	local name="$3"; shift 3
	local body="$*"

	jsock "${host}" "${mode}" "msg" "${name}" "${body}"
}

#
#$1:host
#$2:mode
#$3:name
#[$4:args...]
#
jcmd() {
	local host="$1"
	local mode="$2"
	local name="$3"; shift 3
	local args="$*"
	local body="{\"args\":\"${args}\"}"

	jsock "${host}" "${mode}" "cmd" "${name}" "${body}"
}

#
#[$1:state]
#
jsock_peer_state() {
	local state="$1"

	# get state
	if [ "0" == "$#" ]; then
		if [ -f ${JSOCK_PEER_STATE_FILE} ]; then
			echo 'ok'
		else
			echo 'nok'
		fi
	else # set state
		if [ "ok" == "${state}" ]; then
			touch ${JSOCK_PEER_STATE_FILE}
		else
			rm -f ${JSOCK_PEER_STATE_FILE}
		fi
	fi
}

#
#$1:board
#$2:action
#
jsock_io_check() {
	local self="$0"
	local board="$1"
	local action="$2"

	if [ "${board}" != "$(get_board_type)" ]; then
		jsock_logger "cannot ${action} message/signal:${self%%.*} on ${board}"

		return ${e_bad_board}
	fi
}

jsock_ap_recive_check() {
	jsock_io_check "ap" "recive" || {
		return ${e_bad_board}
	}
}

jsock_md_recive_check() {
	jsock_io_check "md" "recive" || {
		return ${e_bad_board}
	}
}

jsock_ap_send_check() {
	jsock_io_check "ap" "send" || {
		return ${e_bad_board}
	}
}

jsock_md_send_check() {
	jsock_io_check "md" "send" || {
		return ${e_bad_board}
	}
}

main() {
	debug_varlist ${VARLIST_JSOCK_PATH}
}

main "$@"
